const require_utils = require('./utils-CLTHsZtY.cjs');
const node_worker_threads = require_utils.__toESM(require("node:worker_threads"));
const debug = require_utils.__toESM(require("debug"));

//#region src/worker.ts
const debug$1 = (0, debug.default)(`${require_utils.PLUGIN_NAME}:worker`);
const options = node_worker_threads.workerData.options;
const filter = require_utils.getFilter(options);
let stylelintInstance;
let formatter;
const initPromise = require_utils.initializeStylelint(options).then((result) => {
	stylelintInstance = result.stylelintInstance;
	formatter = result.formatter;
	return result;
});
(async () => {
	debug$1("==== worker start ====");
	debug$1("Initialize Stylelint");
	const { stylelintInstance: stylelintInstance$1, formatter: formatter$1 } = await initPromise;
	if (options.lintOnStart) {
		debug$1("Lint on start");
		require_utils.lintFiles({
			files: options.include,
			stylelintInstance: stylelintInstance$1,
			formatter: formatter$1,
			options
		});
	}
})();
node_worker_threads.parentPort?.on("message", async (id) => {
	if (!stylelintInstance) await initPromise;
	debug$1("==== message event ====");
	debug$1(`id: ${id}`);
	const shouldIgnore = require_utils.shouldIgnoreModule(id, filter);
	debug$1(`should ignore: ${shouldIgnore}`);
	if (shouldIgnore) return;
	const filePath = require_utils.getFilePath(id);
	debug$1(`filePath: ${filePath}`);
	require_utils.lintFiles({
		files: options.lintDirtyOnly ? filePath : options.include,
		stylelintInstance,
		formatter,
		options
	});
});

//#endregion