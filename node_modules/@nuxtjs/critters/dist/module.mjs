import { readFile, writeFile } from 'node:fs/promises';
import { defineNuxtModule, useLogger, isNuxtMajorVersion } from '@nuxt/kit';
import { resolve } from 'pathe';
import { withoutLeadingSlash } from 'ufo';
import Beasties from 'beasties';

const module = defineNuxtModule({
  meta: {
    name: "critters",
    configKey: "critters"
  },
  defaults: {
    config: {
      preload: "media"
    }
  },
  setup(options, nuxt) {
    if (nuxt.options.dev) return;
    const logger = useLogger("critters");
    nuxt.options.build.extractCSS = true;
    const generatedFiles = /* @__PURE__ */ new Set();
    nuxt.hook("nitro:init", (nitro) => {
      nitro.hooks.hook("prerender:generate", (route) => {
        if (!route.fileName?.endsWith(".html") || route.error) return;
        generatedFiles.add(withoutLeadingSlash(route.fileName));
      });
    });
    nuxt.hook("nitro:build:public-assets", async (nitro) => {
      const beasties = new Beasties({
        path: nitro.options.output.publicDir,
        publicPath: nitro.options.baseURL,
        ...options.config
      });
      for (const file of generatedFiles) {
        try {
          const path = resolve(nitro.options.output.publicDir, file);
          const contents = await readFile(path, "utf-8");
          const processed = await beasties.process(contents);
          await writeFile(path, processed);
        } catch {
          logger.log(`Could not inline CSS in \`${file}\`.`);
        }
      }
    });
    if (isNuxtMajorVersion(3)) {
      const beasties = new Beasties({
        path: resolve(nuxt.options.buildDir, "dist/client"),
        // @ts-expect-error TODO: use @nuxt/bridge-schema
        publicPath: nuxt.options.build.publicPath,
        ...options.config
      });
      nuxt.hook("render:route", async (_url, result) => {
        if (!result.html || result.error) return;
        try {
          result.html = await beasties.process(result.html);
        } catch (e) {
          logger.log(e);
        }
      });
      nuxt.hook("generate:page", async (result) => {
        if (!result.html || result.error) return;
        result.html = await beasties.process(result.html);
      });
    }
  }
});

export { module as default };
